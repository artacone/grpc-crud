// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObjectsServiceClient is the client API for ObjectsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectsServiceClient interface {
	CreateObject(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error)
	GetObject(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	EditObject(ctx context.Context, in *EditReq, opts ...grpc.CallOption) (*Empty, error)
	DeleteObject(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*Empty, error)
}

type objectsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectsServiceClient(cc grpc.ClientConnInterface) ObjectsServiceClient {
	return &objectsServiceClient{cc}
}

func (c *objectsServiceClient) CreateObject(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, "/ObjectsService/CreateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectsServiceClient) GetObject(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, "/ObjectsService/GetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectsServiceClient) EditObject(ctx context.Context, in *EditReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ObjectsService/EditObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectsServiceClient) DeleteObject(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ObjectsService/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectsServiceServer is the server API for ObjectsService service.
// All implementations must embed UnimplementedObjectsServiceServer
// for forward compatibility
type ObjectsServiceServer interface {
	CreateObject(context.Context, *CreateReq) (*CreateResp, error)
	GetObject(context.Context, *GetReq) (*GetResp, error)
	EditObject(context.Context, *EditReq) (*Empty, error)
	DeleteObject(context.Context, *DelReq) (*Empty, error)
	mustEmbedUnimplementedObjectsServiceServer()
}

// UnimplementedObjectsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedObjectsServiceServer struct {
}

func (UnimplementedObjectsServiceServer) CreateObject(context.Context, *CreateReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (UnimplementedObjectsServiceServer) GetObject(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedObjectsServiceServer) EditObject(context.Context, *EditReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditObject not implemented")
}
func (UnimplementedObjectsServiceServer) DeleteObject(context.Context, *DelReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedObjectsServiceServer) mustEmbedUnimplementedObjectsServiceServer() {}

// UnsafeObjectsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectsServiceServer will
// result in compilation errors.
type UnsafeObjectsServiceServer interface {
	mustEmbedUnimplementedObjectsServiceServer()
}

func RegisterObjectsServiceServer(s grpc.ServiceRegistrar, srv ObjectsServiceServer) {
	s.RegisterService(&ObjectsService_ServiceDesc, srv)
}

func _ObjectsService_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServiceServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectsService/CreateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServiceServer).CreateObject(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectsService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectsService/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServiceServer).GetObject(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectsService_EditObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServiceServer).EditObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectsService/EditObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServiceServer).EditObject(ctx, req.(*EditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectsService_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectsServiceServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectsService/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectsServiceServer).DeleteObject(ctx, req.(*DelReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectsService_ServiceDesc is the grpc.ServiceDesc for ObjectsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ObjectsService",
	HandlerType: (*ObjectsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateObject",
			Handler:    _ObjectsService_CreateObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _ObjectsService_GetObject_Handler,
		},
		{
			MethodName: "EditObject",
			Handler:    _ObjectsService_EditObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _ObjectsService_DeleteObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
